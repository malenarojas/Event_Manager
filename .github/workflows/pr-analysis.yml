name: Pull Request Analysis

on:
  pull_request:
    branches: [ main, develop ]

jobs:
  code-review:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Check TypeScript types
      run: npx tsc --noEmit

    - name: Check for console.log statements
      run: |
        if grep -r "console\.log" src/; then
          echo "❌ Found console.log statements in production code"
          exit 1
        fi

    - name: Check for hardcoded secrets
      run: |
        if grep -r "password\|secret\|key\|token" src/ --ignore-case | grep -v "//\|test\|mock"; then
          echo "⚠️  Potential hardcoded secrets found"
          exit 1
        fi

    - name: Check file sizes
      run: |
        find src/ -name "*.ts" -size +100k | while read file; do
          echo "⚠️  Large file detected: $file"
        done

  dependency-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check for outdated dependencies
      run: npm outdated || true

    - name: Run security audit
      run: npm audit --audit-level=moderate

    - name: Check for unused dependencies
      run: npx depcheck --ignores="@types/*"

    - name: Analyze bundle size
      run: |
        npm run build
        echo "Bundle size analysis:"
        du -sh dist/

  test-coverage:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma client
      run: npx prisma generate

    - name: Run database migrations
      run: npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

    - name: Run tests with coverage
      run: npm run test:cov
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

    - name: Check coverage threshold
      run: |
        COVERAGE=$(npm run test:cov --silent | grep -oP 'All files[^|]*\|\s*\K\d+')
        if [ "$COVERAGE" -lt 80 ]; then
          echo "❌ Test coverage is below 80% (current: ${COVERAGE}%)"
          exit 1
        else
          echo "✅ Test coverage is above 80% (current: ${COVERAGE}%)"
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: pull-request
        name: codecov-pr

  api-testing:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma client
      run: npx prisma generate

    - name: Run database migrations
      run: npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

    - name: Start application
      run: npm run start:dev &
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

    - name: Wait for application to start
      run: sleep 10

    - name: Run API health check
      run: |
        curl -f http://localhost:3000/health || exit 1

    - name: Run E2E tests
      run: npm run test:e2e
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

  performance-check:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: perf_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma client
      run: npx prisma generate

    - name: Run database migrations
      run: npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/perf_db

    - name: Start application
      run: npm run start:dev &
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/perf_db

    - name: Wait for application to start
      run: sleep 10

    - name: Run performance tests
      run: |
        # Simple performance test with Apache Bench
        ab -n 100 -c 10 http://localhost:3000/events || true

    - name: Check memory usage
      run: |
        # Check if application is using reasonable memory
        ps aux | grep node || true

  pr-summary:
    runs-on: ubuntu-latest
    needs: [code-review, dependency-analysis, test-coverage, api-testing, performance-check]
    if: always()

    steps:
    - name: Generate PR Summary
      run: |
        echo "## Pull Request Analysis Summary" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.code-review.result }}" == "success" ]; then
          echo " **Code Review**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo " **Code Review**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.dependency-analysis.result }}" == "success" ]; then
          echo "**Dependency Analysis**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "**Dependency Analysis**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.test-coverage.result }}" == "success" ]; then
          echo " **Test Coverage**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "**Test Coverage**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.api-testing.result }}" == "success" ]; then
          echo " **API Testing**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "**API Testing**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.performance-check.result }}" == "success" ]; then
          echo " **Performance Check**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo " **Performance Check**: Issues detected" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Checklist for Reviewers:" >> $GITHUB_STEP_SUMMARY
        echo "- [ ] Code follows project conventions" >> $GITHUB_STEP_SUMMARY
        echo "- [ ] Tests cover new functionality" >> $GITHUB_STEP_SUMMARY
        echo "- [ ] No security vulnerabilities introduced" >> $GITHUB_STEP_SUMMARY
        echo "- [ ] Performance impact is acceptable" >> $GITHUB_STEP_SUMMARY
        echo "- [ ] Documentation is updated if needed" >> $GITHUB_STEP_SUMMARY 